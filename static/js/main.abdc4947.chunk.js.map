{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","totalUnpaids","setTotalUnpaids","totalPaids","setTotalPaids","pricesUSD","setPricesUSD","pricesEUR","setPricesEUR","times","setTimes","getData","a","wallet","process","ETH_WALLET","replace","axios","get","totalUnpaid","data","totalPaid","console","error","message","getEth","priceUSD","price","priceEUR","getTime","Date","newDate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","useEffect","interval1","setInterval","interval2","clearInterval","className","Helmet","parseFloat","toFixed","style","cursor","onClick","window","location","reload","Circle","Circle100","Number","isNaN","value","strokeWidth","styles","buildStyles","strokeLinecap","pathColor","trailColor","width","Circle10","text","textColor","color","paddingRight","height","numberWithCommas","props","display","justifyContent","alignItems","marginTop","marginBottom","children","position","zIndex","x","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abdc4947.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport axios from 'axios'\n\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [totalUnpaids, setTotalUnpaids] = useState([]);\n  const [totalPaids, setTotalPaids] = useState([]);\n  const [pricesUSD, setPricesUSD] = useState([]);\n  const [pricesEUR, setPricesEUR] = useState([]);\n  const [times, setTimes] = useState([]);\n\n  const refreshPage = () => {\n    window.location.reload(false);\n  };\n\n  const getData = async () => {\n    try {\n      let wallet = process.env.ETH_WALLET || \"0x1ad68e074d71c8fc6abe15187173767101d4c26e\"\n      wallet = wallet.replace(\"0x\", \"\")\n      const totalUnpaid = await axios.get(\n        `https://hiveon.net/api/v1/stats/miner/${wallet}/ETH/billing-acc`\n      );\n      setTotalUnpaids(totalUnpaid.data.totalUnpaid);\n      setTotalPaids(totalUnpaid.data.totalPaid);\n\n      // const priceUSD = await axios.get(\"https://api.ethereumdb.com/v1/ticker?pair=ETH-USD&range=1h\")\n      // setPricesUSD(priceUSD.data.price);\n      // const priceEUR = await axios.get(\"https://api.ethereumdb.com/v1/ticker?pair=ETH-EUR&range=1h\")\n      // setPricesEUR(priceEUR.data.price);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const getEth = async () => {\n    try {\n      const priceUSD = await axios.get(\n        \"https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT\"\n      );\n      setPricesUSD(priceUSD.data.price);\n\n      const priceEUR = await axios.get(\n        \"https://api.binance.com/api/v3/ticker/price?symbol=ETHEUR\"\n      );\n      setPricesEUR(priceEUR.data.price);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const getTime = async () => {\n    try {\n      const newDate = await new Date();\n      setTimes(\n        `${newDate.getDate()}/${\n          newDate.getMonth() + 1\n        }/${newDate.getFullYear()} - ${\n          (newDate.getHours() < 10 ? \"0\" : \"\") + newDate.getHours()\n        }:${(newDate.getMinutes() < 10 ? \"0\" : \"\") + newDate.getMinutes()}:${\n          (newDate.getSeconds() < 10 ? \"0\" : \"\") + newDate.getSeconds()\n        }`\n      );\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n    getTime();\n\n    const interval1 = setInterval(() => {\n      getTime();\n      getEth();\n    }, 1000);\n\n    const interval2 = setInterval(() => {\n      getData();\n    }, 1000);\n\n    return () => {\n      clearInterval(interval1);\n      clearInterval(interval2);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>{`${parseFloat(totalUnpaids * 1000).toFixed(2)}%`}</title>\n      </Helmet>\n      <header className=\"App-header\">\n        <div\n          className=\"heading-frame\"\n          style={{ cursor: \"pointer\" }}\n          onClick={() => refreshPage()}\n        >\n          <span>\n            Mohamed HM<br />{times}\n          </span>\n        </div>\n\n        <Circle>\n          <Circle100>\n            {Number.isNaN(parseFloat(totalPaids)) ? (\n              <CircularProgressbar\n                value={parseFloat(totalUnpaids * 100).toFixed(2)}\n                strokeWidth={50}\n                styles={buildStyles({\n                  strokeLinecap: \"butt\",\n                  pathColor: \"#0d5a7f\",\n                  trailColor: \"#333\",\n                  width: \"80%\",\n                })}\n              />\n            ) : (\n              <CircularProgressbar\n                value={parseFloat((totalPaids + totalUnpaids) * 100).toFixed(2)}\n                strokeWidth={50}\n                styles={buildStyles({\n                  strokeLinecap: \"butt\",\n                  pathColor: \"#0d5a7f\",\n                  trailColor: \"#333\",\n                  width: \"80%\",\n                })}\n              />\n            )}\n          </Circle100>\n\n          <Circle10>\n            <CircularProgressbar\n              value={parseFloat(totalUnpaids * 1000).toFixed(2)}\n              text={`${parseFloat(totalUnpaids * 1000).toFixed(2)}%`}\n              styles={buildStyles({\n                strokeLinecap: \"butt\",\n                textColor: \"#c1aea8\",\n                pathColor: \"#941717\",\n                trailColor: \"#c1aea8\",\n              })}\n            />\n          </Circle10>\n        </Circle>\n\n        {Number.isNaN(parseFloat(pricesUSD)) ? (\n          \"\"\n        ) : (\n          <p style={{ color: \"#c1aea8\" }}>\n            <span\n              className=\"iconify\"\n              data-icon=\"mdi:ethereum\"\n              style={{ paddingRight: 5, height: 14 }}\n            ></span>\n            <span style={{ color: \"#6ee49d\" }}>\n              {numberWithCommas(parseFloat(pricesUSD).toFixed(2))}$\n            </span> | <span style={{ color: \"#d46565\" }}>\n              {numberWithCommas(parseFloat(pricesUSD * 180).toFixed(2))}\n            </span> | <span style={{ color: \"#e4d06e\" }}>\n              {numberWithCommas(parseFloat(pricesEUR).toFixed(2))}€\n            </span>\n          </p>\n        )}\n\n        {Number.isNaN(parseFloat(pricesUSD)) ? (\n          \"\"\n        ) : (\n          <p style={{ color: \"#c1aea8\" }}>\n            <span\n              className=\"iconify\"\n              data-icon=\"clarity:resource-pool-solid\"\n              style={{ paddingRight: 5, height: 13 }}\n            ></span>\n            <span style={{ color: \"#6ee49d\" }}>\n              {numberWithCommas(\n                parseFloat(pricesUSD * totalUnpaids).toFixed(2)\n              )}\n              $\n              </span> | <span style={{ color: \"#d46565\" }}>\n              {numberWithCommas(\n                parseFloat(pricesUSD * totalUnpaids * 180).toFixed(2)\n              )}\n            </span> | <span style={{ color: \"#e4d06e\" }}>\n              {numberWithCommas(\n                parseFloat(pricesEUR * totalUnpaids).toFixed(2)\n              )}\n              €\n            </span>\n          </p>\n        )}\n\n        {Number.isNaN(parseFloat(totalPaids)) ? (\n          \"\"\n        ) : (\n          <p style={{ color: \"#c1aea8\" }}>\n            <span className=\"iconify\" data-icon=\"clarity:wallet-solid\" style={{ paddingRight: 5, height: 13 }}></span>\n            <span style={{ color: \"#6ee49d\" }}>\n              {numberWithCommas(parseFloat(pricesUSD * totalPaids).toFixed(2))}$\n            </span> | <span style={{ color: \"#d46565\" }}>\n              {numberWithCommas(\n                parseFloat(pricesUSD * totalPaids * 180).toFixed(2)\n              )}\n            </span> | <span style={{ color: \"#e4d06e\" }}>\n              {numberWithCommas(parseFloat(pricesEUR * totalPaids).toFixed(2))}€\n            </span>\n          </p>\n        )}\n      </header>\n    </div>\n  );\n\n  function Circle(props) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"30%\",\n          width: 100,\n          marginTop: 20,\n          marginBottom: 20,\n        }}\n      >\n        {props.children}\n      </div>\n    );\n  }\n\n  function Circle100(props) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          position: \"absolute\",\n          width: 100,\n        }}\n      >\n        {props.children}\n      </div>\n    );\n  }\n\n  function Circle10(props) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          zIndex: 1,\n        }}\n      >\n        {props.children}\n      </div>\n    );\n  }\n\n  function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}