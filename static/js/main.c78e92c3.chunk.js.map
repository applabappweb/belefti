{"version":3,"sources":["logo.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","earnings","setEarnings","prices","setPrices","useEffect","axios","get","then","res","data","catch","err","console","log","cur","price","tot","totalUnpaid","act","Date","now","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","className","style","color","src","logo","alt","onClick","window","location","reload","cursor","parseFloat","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAe,MAA0B,iC,eC6C1BA,MAxCf,WAKE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,IAAMC,IAAI,kGAAkGC,MAAK,SAAAC,GAAG,OAAEP,EAAYO,EAAIC,SAAOC,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,MAEpKN,IAAMC,IAAI,8DAA8DC,MAAK,SAAAC,GAAG,OAAEL,EAAUK,EAAIC,SAAOC,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,QAC7H,IAEH,IAAMG,EAAMZ,EAAOa,MACbC,EAAIhB,EAASiB,YACbC,EAAM,IAAIC,KACVC,EAAG,UAAKF,EAAIG,UAAT,YAAsBH,EAAII,WAAW,EAArC,YAA0CJ,EAAIK,cAA9C,kBAAmEL,EAAIM,WAAa,GAAI,IAAI,IAAMN,EAAIM,WAAtG,aAAsHN,EAAIO,aAAe,GAAI,IAAI,IAAMP,EAAIO,aAA3J,aAA6KP,EAAIQ,aAAe,GAAI,IAAI,IAAMR,EAAIQ,cAE3N,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,oBAAIC,MAAO,CAACC,MAAO,WAAnB,wBACA,qBAAKC,IAAKC,EAAMJ,UAAU,WAAWK,IAAI,OAAOC,QAtBtD,WACEC,OAAOC,SAASC,QAAO,IAqBmDR,MAAO,CAACS,OAAQ,aACtF,6BAAKjB,IACL,6DAC6B,sBAAMQ,MAAO,CAACC,MAAO,WAArB,SAAkCS,WAAWtB,GAAKuB,QAAQ,KAAU,uBAAMX,MAAO,CAACC,MAAO,WAArB,uBAA6CS,WAAWxB,GAAKyB,QAAQ,GAArE,UAEjG,8EAC8C,uBAAMX,MAAO,CAACC,MAAO,WAArB,UAAmCS,WAAe,IAAJtB,GAAUuB,QAAQ,GAAhE,WAE9C,qDACqB,uBAAMX,MAAO,CAACC,MAAO,WAArB,UAAmCS,WAAWxB,EAAIE,EAAI,KAAKuB,QAAQ,GAAnE,kBCzBdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c78e92c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.689b0658.jpg\";","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport logo from './logo.jpg';\nimport './App.css';\n\nfunction App() {\n  function refreshPage() {\n    window.location.reload(false);\n  }\n\n  const [earnings, setEarnings] = useState([])\n  const [prices, setPrices] = useState([])\n\n  useEffect(()=>{\n    axios.get(\"https://hiveon.net/api/v1/stats/miner/1ad68e074d71c8fc6abe15187173767101d4c26e/ETH/billing-acc\").then(res=>setEarnings(res.data)).catch(err=>console.log(err));\n  \n    axios.get(\"https://api.ethereumdb.com/v1/ticker?pair=ETH-USD&range=1h\").then(res=>setPrices(res.data)).catch(err=>console.log(err))\n  }, [])\n\n  const cur = prices.price;\n  const tot=earnings.totalUnpaid;\n  const act = new Date(); \n  const now =`${act.getDate()}/${act.getMonth()+1}/${act.getFullYear()} Ã  ${((act.getHours() < 10)?\"0\":\"\") + act.getHours()}:${((act.getMinutes() < 10)?\"0\":\"\") + act.getMinutes()}:${((act.getSeconds() < 10)?\"0\":\"\") + act.getSeconds()}`;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 style={{color: \"#c1aea8\"}}>Mohamed HM</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" onClick={refreshPage} style={{cursor: 'pointer'}}/>\n        <h3>{now}</h3>\n        <h4>\n          La valeur actuelle est de: <span style={{color: \"#37b837\"}}>{parseFloat(tot).toFixed(5)}</span><span style={{color: \"#3c6bd4\"}}>  (1E. = ${(parseFloat(cur).toFixed(2))})</span>\n        </h4>\n        <h4>\n          Le pourcentage pour atteindre 0.1E. est de: <span style={{color: \"#d46565\"}}>{(parseFloat(tot*1000).toFixed(2))} %</span>\n        </h4>\n        <h4>\n          Le Montant est de: <span style={{color: \"#e4d06e\"}}>{(parseFloat(cur*tot*180).toFixed(2))} DA</span>\n        </h4>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}